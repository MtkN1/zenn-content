{
  "title": "できるだけ公式ドキュメントに沿って Amazon Linux 2 に Docker / Docker Compose をインストールする",
  "closed": true,
  "archived": false,
  "created_at": "2022-05-05",
  "comments": [
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "Docker (Docker Engine) を Ubuntu や Debian, Centos, Feodra などの Linux ディストリビューションにインストールするには、Docker 公式ドキュメントのインストール手順^[https://docs.docker.com/engine/install/]を参照すればパッケージマネージャーを介して容易に行える。\n\nしかし、クラウドの Amazon EC2 で利用できる Linux ディストリビューションである Amazon Linux 2 へのインストールについては Docker のドキュメント内で説明がされていない。\n検索する所によると^[https://www.google.co.jp/search?q=amazon+linux+2+docker] `sudo yum install docker` だけでインストールできるようだが、このスクラップでは一次情報からまとめることで他の Linux ディストリビューションとの違いを理解して Amazon Linux 2 に Docker をインストールする。\n\nまた、マルチコンテナーを用いる為によく利用される Docker プラグインである Docker Compose のインストールについても併せて記載する。",
      "body_updated_at": "2022-05-05"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "# 公式ドキュメント\n\nAWS のドキュメントを漁ったところ、Amazon Linux 2 への Docker のインストール手順を説明は、Amazon Linux 2 の実行基盤である Amazon EC2 のドキュメントではなく、コンテナ管理サービスである Amazon ESC の方のドキュメントに存在している。\n\nhttps://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/create-container-image.html#create-container-image-install-docker\n\n> 4. 最新の Docker Engine パッケージをインストールします。\n> ```bash\n> sudo amazon-linux-extras install docker\n> ```\n\nこのコマンドで Docker がインストールできる。\nインストールするだけならこれに従うだけで十分なので、検索して出てくる情報の `sudo yum install docker` と公式ドキュメントの `sudo amazon-linux-extras install docker` の違いは何なのか理解していく。\n\n# `amazon-linux-extras` について\n\nまず `amazon-linux-extras` コマンドとは何なのか、というと Amazon EC2 のドキュメントに説明がある。\n\nhttps://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html#extras-library\n\n> Amazon Linux 2 では、Extras Library を使用してアプリケーションおよびソフトウェア更新をインスタンスにインストールできます。このようなソフトウェア更新は、トピックと呼ばれます。特定のバージョンのトピックをインストールしたり、最新バージョンを使用するためにバージョン情報を省略したりすることができます。\n\n実際に `amazon-linux-extras list` と打って、Extras Library のトピック一覧を表示してみる。\n\n```bash\n[ec2-user ~]$ amazon-linux-extras list\n…\n 19  gimp                     available    [ =2.8.22 ]\n 20  docker=latest            enabled      \\\n        [ =17.12.1  =18.03.1  =18.06.1  =18.09.9  =stable ]\n 21  mate-desktop1.x          available    \\\n        [ =1.19.0  =1.20.0  =stable ]\n…\n```\n\n確かに `docker` というトピックがあり、しかもこれはインスタンス起動直後何も変更していない状態だが一覧の中 `docker` トピックは `enabled`になっており、他の殆どは `available` になっている。\n\n状態が `enabled` になっている為なのか `yum search docker` や `yum list | grep docker` をしてみると、`docker` パッケージがヒットする。\n\n```bash\n[ec2-user ~]$ yum search docker\n…\ndocker.x86_64 : Automates deployment of containerized applications\n…\n```\n```bash\n[ec2-user ~]$ yum list | grep docker\n…\ndocker.x86_64                          20.10.13-2.amzn2               amzn2extra-docker\n…\n```\n\n`sudo yum install docker` でもインストール可能のようだ。(この場合は `N` でキャンセルした)\n\n```bash\n[ec2-user ~]$ sudo yum install docker\n…\n========================================================================================================================\n Package                  Arch                 Version                            Repository                       Size\n========================================================================================================================\nInstalling:\n docker                   x86_64               20.10.13-2.amzn2                   amzn2extra-docker                40 M\nInstalling for dependencies:\n containerd               x86_64               1.4.13-2.amzn2.0.1                 amzn2extra-docker                23 M\n libcgroup                x86_64               0.41-21.amzn2                      amzn2-core                       66 k\n pigz                     x86_64               2.3.4-1.amzn2.0.1                  amzn2-core                       81 k\n runc                     x86_64               1.0.3-2.amzn2                      amzn2extra-docker               3.0 M\n\nTransaction Summary\n========================================================================================================================\nInstall  1 Package (+4 Dependent packages)\n\nTotal download size: 67 M\nInstalled size: 280 M\nIs this ok [y/d/N]:\n```\n\nでは `sudo amazon-linux-extras install docker` と `sudo yum install docker` どちらを使えばいいのだろうか？\n試しに `sudo amazon-linux-extras disable docker` で状態を `available` にし `sudo yum install docker` すると、`enabled` でない為 `amazon-linux-extras install` コマンドからインストールするよう促されるようになる。\n\n```bash\n[ec2-user ~]$ sudo amazon-linux-extras disable docker\n…\n 20  docker                   available    \\\n        [ =17.12.1  =18.03.1  =18.06.1  =18.09.9  =stable ]\n…\n[ec2-user ~]$ sudo yum install docker\n…\nNo package docker available.\nError: Nothing to do\n\n\ndocker is available in Amazon Linux Extra topic \"docker\"\n\nTo use, run\n# sudo amazon-linux-extras install docker\n\nLearn more at\nhttps://aws.amazon.com/amazon-linux-2/faqs/#Amazon_Linux_Extras\n```\n\n従って、デフォルトで Extras library の `docker` トピックは `enabled` になっている為に `sudo yum install docker` でインストール可能のようではあるが、`sudo amazon-linux-extras install docker` コマンドであれば「`docker` トピックを `enabled` にして `docker` パッケージをインストール」してくれるので、先の Amazon ECS のドキュメントにあるようにこちらのコマンドを使うのが確実だろう。",
      "body_updated_at": "2022-05-05"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "# Docker 公式ドキュメントにあるインストール方法との違いについて\n\nCentOS の Docker インストール手順^[https://docs.docker.com/engine/install/centos/#install-using-the-repository]では `yum-config-manager --add-repo` してから `yum install` している。\nこれは Docker が管理しているリポジトリを CentOS の Yum パッケージマネージャーに追加してインストールしており、APT 系ディストリビューションについても同様に Docker のリポジトリを追加してインストールしている。\n\nこれに対して Amazon Linux 2 では Extras Library を有効にしてインストールしているので、Amazon が管理しているリポジトリから Docker をインストールしているといった違いがある。",
      "body_updated_at": "2022-05-05"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "# インストール手順まとめ\n\n## Amazon ECS ドキュメント[^1]より\n\n1. パッケージの更新\n> インスタンスでインストールされているパッケージとパッケージキャッシュを更新します。\n> ```bash\n> sudo yum update -y\n> ```\n\n2. Docker Engine のインストール\n> 最新の Docker Engine パッケージをインストールします。\n> ```bash\n> sudo amazon-linux-extras install docker\n> ```\n\n:::message\nインストールの確認シーケンスが入るので、`amazon-linux-extras install` も `yum install` と同様に `-y` オプションを付けると確認シーケンスをスキップできる。\n:::\n\n## Docker ドキュメント[^2]より\n\n3. Docker を起動\n\n> Start Docker.\n> ```bash\n> sudo systemctl start docker\n> ```\n\n4. `hello-world` イメージを実行して、Docker Engine が正しくインストールされていることの確認\n> Verify that Docker Engine is installed correctly by running the hello-world image.\n> ```bash\n> sudo docker run hello-world\n>  ```\n\n:::message\n`hello-world` コンテナ停止後コンテナが残るので、`--rm` オプションを付けると停止後自動で削除される。\n:::\n\n## (オプション) Docker ドキュメント[^3]より\n\n5. `sudo` なしで実行できるように docker グループに追加\n> Add your user to the docker group.\n> ```bash\n> sudo usermod -aG docker $USER\n> ```\n\n[^1]: https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/create-container-image.html#create-container-image-install-docker\n[^2]: https://docs.docker.com/engine/install/centos/#install-using-the-repository\n[^3]: https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user",
      "body_updated_at": "2022-05-05"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "# `docker` コマンドの Tab 入力補完が効かない\n\nこのスクラップで紹介した手順 Amazon Linux 2 に Docker をインストールできたが、`docker` コマンドの Tab 入力補完が効かない。\n\nDocker の公式ドキュメントに沿ってインストールした Feodra では、`docker ` と入力したあとに Tab キーを押下すると以下のようにサブコマンドを表示してくれる。\n\n```bash:Fedora\n[fedora ~]$ docker\nattach     context    export     info       logs       port       rm         service    system     version\nbuild      cp         help       inspect    manifest   ps         rmi        stack      tag        volume\nbuilder    create     history    kill       network    pull       run        start      top        wait\ncommit     diff       image      load       node       push       save       stats      trust\nconfig     events     images     login      pause      rename     search     stop       unpause\ncontainer  exec       import     logout     plugin     restart    secret     swarm      update\n```\n\nAmazon Linux 2 ではそれが効いていないので、カレントディレクトリの内容が表示されてしまう。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ docker .\n./             ../            .bash_logout   .bash_profile  .bashrc        .cache/        .ssh/\n```\n\nこの機能は `bash-completion` パッケージによるものだが、Amazon Linux 2にはデフォルトでインストールされている。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ yum list installed | grep bash-completion\nbash-completion.noarch                1:2.1-6.amzn2                    installed\n```\n\nなぜ入力補完が効かないのか、Fedora 環境と比べて原因を調査してみる。\n\n## `/etc/bash_completion.d/`\n\n定石としては、OSS では `bash-completion` を作用させる為に `/etc/bash_completion.d/` にファイルを格納する指示がよくあるのでそのディレクトリの中を調べてみた。\n\n```bash:Feodra\n[fedora ~]$ ls /etc/bash_completion.d/\nredefine_filedir\n```\n\n関係ないパッケージのファイルしかなかった。\n恐らく別の場所にインストールされているはずである。\n\n## `/usr/share/bash-completion`\n\n`rpm -q --list` コマンドを使うとそのパッケージでインストールしたファイルの一覧を取得できるので、どのファイルが `bash-completion` に作用しているか調べる。\n\n```bash:Fedora\n[fedora ~]$ rpm -q --list docker-ce-cli | grep bash\n/usr/share/bash-completion/completions/docker\n```\n\n`/usr/share/bash-completion/completions/docker` に `bash-completion` 用とみられるファイルが格納されている。\n検索すると、GitHub リポジトリの https://github.com/docker/cli/blob/master/contrib/completion/bash/docker と同一のファイルのようである。\nドキュメントに入力補完に関する説明はないが、これが作用しているファイルだと状況証拠から断定できる。\n\nAmazon Linux 2 側でも同様に調べてみる。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ rpm -q --list docker | grep bash\n/usr/share/bash-completion/docker\n```\n\n- 中身は同様のファイル\n- パスが `bash-completion/completions/` の中にあるのか、`bash-completion/` 直下にあるのかの違いがある\n\n\n`bash-completion/` 直下にあるのは Amazon Linux 2 の間違いではないだろうか？\n`bash-completion/completions/` にシンボリックリンクを貼ってみる。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ sudo ln -sf /usr/share/bash-completion/docker /usr/share/bash-completion/completions/docker\n```\n\n入力補完が効くようになった。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ docker\nattach     context    export     info       logs       port       rm         service    system     version\nbuild      cp         help       inspect    manifest   ps         rmi        stack      tag        volume\nbuilder    create     history    kill       network    pull       run        start      top        wait\ncommit     diff       image      load       node       push       save       stats      trust\nconfig     events     images     login      pause      rename     search     stop       unpause\ncontainer  exec       import     logout     plugin     restart    secret     swarm      update\n```",
      "body_updated_at": "2022-05-05"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-05",
      "body_markdown": "# Docker Compose\n\nAmazon Linux 2 に Docker (Docker Engine) をインストールしたが、マルチコンテナーを用いる為のプラグインツール Docker Compose はインストールされてないので、別途インストールが要る。\n\n検索する所に、他の Linux ディストリビューションでも別途インストールが要るという情報があるが、最新の Docker ドキュメントの手順^[https://docs.docker.com/engine/install/centos/#install-docker-engine]でインストールすると `docker-compose-plugin` パッケージもインストールしている。\nDocker ドキュメントにある Linux ディストリビューションについては、別の手順を踏まずに利用可能のようである。\n\n## `docker-compose-plugin` パッケージ\n\nしかしこの `docker-compose-plugin` パッケージは `docker` のサブコマンドとしてプラグイン化された `docker compose` コマンドである。\nよく見かける `docker-compose` コマンドではない。\nDocker Compose は元々 `docker-compose` コマンドとしてバイナリとして配布されていたようだが、Docker Compose V2 からは CLI のプラグインとして `docker compose` で利用できるようになっている^[https://docs.docker.com/compose/#compose-v2-and-the-new-docker-compose-command]ようだ。\n\n```bash:Fedora\n[fedora ~]$ docker compose version\nDocker Compose version v2.3.3\n```\n\n`docker-compose` コマンドの方がよく見かけるが、ソフトウェアの観点として最新バージョンを使う方が好ましいので、Docker Compose V2 のインストールを進める。\n\n## Amazon Linux 2 の場合\n\nAmazon Linux 2 の場合は Extras Library リポジトリにも Docker Compose をインストールするパッケージはないので、これについては Compose ドキュメントのインストール手順の **Linux Standalone binary -> Install the binary manually** に沿って行う。\n\nhttps://docs.docker.com/compose/install/#install-compose\n\n> Run this command to download the current stable release of Docker Compose:\n> ```bash\n> DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}\n> mkdir -p $DOCKER_CONFIG/cli-plugins\n> curl -SL https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux->x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose\n> ```\n> This command installs Compose for the active user under $HOME directory. To install Docker Compose for all users on your system, replace ~/.docker/cli-plugins with /usr/local/lib/docker/cli-plugins.\n\nGitHub リリースからバイナリをダウンロードしてきて、所定の `cli-plugins/` にバイナリを格納するといった手順になっている。\nインストールコマンド例は単一ユーザー向けとなっていて、システムワイドに適用するにはバイナリは  `/usr/local/lib/docker/cli-plugins` に格納しろと書いてる。\n\nしかし、そんなものはなかった。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ ls /usr/local/lib/docker/cli-plugins\nls: cannot access /usr/local/lib/docker/cli-plugins: No such file or directory\n[ec2-user ~]$ ls /usr/local/lib/docker\nls: cannot access /usr/local/lib/docker: No such file or directory\n```\n\nCompose ドキュメントではなく GitHub リポジトリの README を確認してみる。\n\nhttps://github.com/docker/compose#linux\n\n> Or copy it into one of these folders for installing it system-wide:\n> - /usr/local/lib/docker/cli-plugins OR /usr/local/libexec/docker/cli-plugins\n> - /usr/lib/docker/cli-plugins OR /usr/libexec/docker/cli-plugins\n\nこちらには4か所候補が書かれている。\nAmazon Linux 2 どこに `cli-plugins` ディレクトリがあるのか確認する。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ rpm -q --list docker | grep cli-plugins\n/usr/libexec/docker/cli-plugins\n/usr/libexec/docker/cli-plugins/buildx\n```\n\n`/usr/libexec/docker/cli-plugins` が当たりのようだ。\nでは、リリースページ^[https://github.com/docker/compose/releases]から最新バージョンの `docker-compose-linux-x86_64` バイナリをダウンロードしてそちらに格納する。\n\n:::message\n現在の最新バージョンは v2.5.0\n:::\n\n```bash:Amazon Linux2\n[ec2-user ~]$ sudo curl -SL https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-linux-x86_64 -o /usr/libexec/docker/cli-plugins/docker-compose\n[ec2-user ~]$ sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose\n[ec2-user ~]$ docker compose version\nDocker Compose version v2.5.0\n```\n\nDocker Compose も利用できるようになった。",
      "body_updated_at": "2022-05-06"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-06",
      "body_markdown": "## `docker compose` コマンドも Tab 入力補完が効かない\n\n残念ながら、`docker compose` コマンドも Tab 入力補完が効かない。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ docker compose [TAB…]\n\n```\n\n## Issues\n\nIssues を漁ってみると、 Docker Compose V2 は入力補完が対応していないようである。\n\nhttps://github.com/docker/compose/issues/8550\n\n## Compose ドキュメント\n\nCompose ドキュメントの CLI リファレンスには入力補完の説明がある。\n\nhttps://docs.docker.com/compose/completion/\n\n> Place the completion script in /etc/bash_completion.d/.\n> ```bash\n> sudo curl \\\n>     -L https://raw.githubusercontent.com/docker/compose/v2.5.0/contrib/completion/bash/docker-compose \\\n>     -o /etc/bash_completion.d/docker-compose\n\nしかしcurl するファイル [https://raw.githubusercontent.com/docker/compose/v2.5.0/contrib/completion/bash/docker-compose]() は...\n\n```\n404: Not Found\n```\n\n404になっていて、ドキュメントの説明が成立していない。\n`contrib/completion/bash/docker-compose` は Compose V2 になった時点でファイルツリーにない。\n\n[https://github.com/docker/compose/tree/v2.0.0]()\n\nつまりは、V2 はまだ入力補完に対応してないということであろうか。"
    },
    {
      "author": "mtkn1",
      "created_at": "2022-05-06",
      "body_markdown": "# `docker-compose` のインストールと入力補完の有効化\n\n## インストール\n\nCompose ドキュメントは既に V2 のインストール方法に置き換わっている。\nCompose の GitHub リポジトリの `1.29.2` 版 README では殆ど説明がない。\n\nDocker ドキュメントの GitHub リポジトリは [docker/docker.github.io](https://github.com/docker/docker.github.io) のようなので、説明が置き換わる PR^[https://github.com/docker/docker.github.io/pull/14614] を調べて、その 1 つ前の PR^[https://github.com/docker/docker.github.io/pull/14602] マージ時点での `compose/install.md` を参照する。\n\nhttps://github.com/docker/docker.github.io/blob/832a1397328ec9f904e60c31a30f3a711b355ac2/compose/install.md#install-compose-on-linux-systems\n\n> Run this command to download the current stable release of Docker Compose:\n> ```bash\n> $ sudo curl -L \"https://github.com/docker/compose/releases/download/{{site.compose_version}}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n> ```\n\n単純にバイナリを `/usr/local/bin/docker-compos` に格納するだけのようだ。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose\n[ec2-user ~]$ sudo chmod +x /usr/local/bin/docker-compose\n[ec2-user ~]$ docker-compose --version\ndocker-compose version 1.29.2, build 5becea4c\n```\n\n`docker-compose` コマンドをインストールできた。\n\n## 入力補完の有効化\n\n上記と同じ時点の `compose/completion.md` だが\n\nhttps://github.com/docker/docker.github.io/blob/832a1397328ec9f904e60c31a30f3a711b355ac2/compose/completion.md#linux\n\n> Place the completion script in /etc/bash_completion.d/.\n> ```bash\n> $ sudo curl \\\n>     -L https://raw.githubusercontent.com/docker/compose/{{site.compose_version}}/contrib/completion/bash/docker-compose \\\n>     -o /etc/bash_completion.d/docker-compose\n\n現状の整合の取れていないドキュメント^[https://docs.docker.com/compose/completion/]と変わりないので、バージョンを `1.29.2` に変更だけして手順を実施する。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ sudo curl \\\n    -L https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose \\\n    -o /etc/bash_completion.d/docker-compose\n```\n\nbash を再起動して\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ docker-compose\nbuild    create   events   help     kill     pause    ps       push     rm       scale    stop     unpause  version\nconfig   down     exec     images   logs     port     pull     restart  run      start    top      up\n```\n\n`docker-compose` コマンドは TAB 入力補完を有効にできた。\n\n# まとめ\n\nここまでを全て行うと `docker compose` と `docker-compose` がインストールされている状態だが、それぞれ独立しているのでどちらも利用できる。\n\n```bash:Amazon Linux 2\n[ec2-user ~]$ docker-compose --version\ndocker-compose version 1.29.2, build 5becea4c\n[ec2-user ~]$ docker compose version\nDocker Compose version v2.5.0\n```\n\nまとめると\n\n- `docker compose` は推奨される最新版で通常の Linux ディストリビューションなら同時にインストールされるが、まだ現状入力補完が利用できない\n- `docker-compose` はよく見かけるコマンドで入力補完が利用できるが、このバージョンは将来的には非推奨となるとみられる",
      "body_updated_at": "2022-05-06"
    }
  ]
}